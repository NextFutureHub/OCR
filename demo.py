#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã OCR Quality Assessment API
"""

import requests
import json
import time
from typing import Dict, Any

class OCRDemo:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
    
    def demo_ocr_quality_assessment(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ OCR"""
        print("üîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–¶–ï–ù–ö–ò –ö–ê–ß–ï–°–¢–í–ê OCR")
        print("=" * 50)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å —Ä–∞–∑–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º OCR
        test_cases = [
            {
                "name": "–ò–¥–µ–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                "extracted": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ 01.01.2023 +7(999)123-45-67",
                "ground_truth": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ 01.01.2023 +7(999)123-45-67",
                "expected_score": "100%"
            },
            {
                "name": "–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                "extracted": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ 01.01.2023 +7(999)123-45-67",
                "ground_truth": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ 01.01.2023 +7(999)123-45-67",
                "expected_score": "95-99%"
            },
            {
                "name": "–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                "extracted": "–ò–≤–Ω –ò–≤–Ω–æ–≤ 01.01.202 +7(999)123-45-6",
                "ground_truth": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ 01.01.2023 +7(999)123-45-67",
                "expected_score": "70-85%"
            },
            {
                "name": "–ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
                "extracted": "–ò–≤@–Ω –ò–≤#–Ω–æ–≤ 01.01.2O23 +7(999)123-45-67",
                "ground_truth": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ 01.01.2023 +7(999)123-45-67",
                "expected_score": "50-70%"
            }
        ]
        
        for i, case in enumerate(test_cases, 1):
            print(f"\nüìÑ –¢–µ—Å—Ç {i}: {case['name']}")
            print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–ª: {case['expected_score']}")
            print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{case['extracted']}'")
            print(f"   –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:   '{case['ground_truth']}'")
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            metrics = self._calculate_metrics(case['extracted'], case['ground_truth'])
            if metrics:
                self._display_metrics(metrics)
                score = self._calculate_overall_score(metrics)
                print(f"   üéØ –û–±—â–∏–π –±–∞–ª–ª: {score:.1f}%")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–µ—Ç—Ä–∏–∫")
    
    def demo_field_extraction(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π"""
        print("\n\nüìã –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–û–õ–ï–ô")
        print("=" * 50)
        
        # –ü—Ä–∏–º–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        documents = [
            {
                "name": "–ü–∞—Å–ø–æ—Ä—Ç",
                "text": "–§–ò–û: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: 01.01.1990, –ü–∞—Å–ø–æ—Ä—Ç: 1234 567890",
                "expected_fields": ["name", "date", "passport"]
            },
            {
                "name": "–î–æ–≥–æ–≤–æ—Ä",
                "text": "–ó–∞–∫–∞–∑—á–∏–∫: –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á, –°—É–º–º–∞: 100000 —Ä—É–±, –î–∞—Ç–∞: 15.03.2023",
                "expected_fields": ["name", "amount", "date"]
            },
            {
                "name": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                "text": "–ò–º—è: –°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä, –¢–µ–ª–µ—Ñ–æ–Ω: +7(999)123-45-67, Email: sidor@example.com",
                "expected_fields": ["name", "phone", "email"]
            }
        ]
        
        for doc in documents:
            print(f"\nüìÑ {doc['name']}:")
            print(f"   –¢–µ–∫—Å—Ç: {doc['text']}")
            print(f"   –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è: {doc['expected_fields']}")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π
            extracted_fields = self._simulate_field_extraction(doc['text'], doc['expected_fields'])
            print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {extracted_fields}")
            
            # –†–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            accuracy = self._calculate_field_accuracy(extracted_fields, doc['expected_fields'])
            print(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {accuracy:.1f}%")
    
    def demo_noise_handling(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à—É–º–∞"""
        print("\n\nüîß –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –®–£–ú–ê")
        print("=" * 50)
        
        # –ü—Ä–∏–º–µ—Ä—ã –∑–∞—à—É–º–ª–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        noisy_texts = [
            {
                "name": "–°–æ–ª–µ–≤–æ–π –∏ –ø–µ—Ä—Ü–æ–≤—ã–π —à—É–º",
                "original": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ 01.01.2023",
                "noisy": "–ò–≤@–Ω –ò–≤#–Ω–æ–≤ 01.01.2O23"
            },
            {
                "name": "–ì–∞—É—Å—Å–æ–≤ —à—É–º",
                "original": "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤ 02.02.2023",
                "noisy": "–ü–µ—Ç—Ä –ü–µ—Ç—Ä0–≤ 02.02.2023"
            },
            {
                "name": "–°–º–µ—à–∞–Ω–Ω—ã–π —à—É–º",
                "original": "–°–∏–¥—Ä –°–∏–¥—Ä–æ–≤ 03.03.2023",
                "noisy": "–°–∏–¥—Ä –°1–¥—Ä0–≤ 03.03.2023"
            }
        ]
        
        for text_case in noisy_texts:
            print(f"\nüìÑ {text_case['name']}:")
            print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: '{text_case['original']}'")
            print(f"   –ó–∞—à—É–º–ª–µ–Ω–Ω—ã–π: '{text_case['noisy']}'")
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∑–∞—à—É–º–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            metrics = self._calculate_metrics(text_case['noisy'], text_case['original'])
            if metrics:
                print(f"   üìä CER: {metrics.get('cer', 0):.3f}")
                print(f"   üìä WER: {metrics.get('wer', 0):.3f}")
                
                # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                recovery_score = (1 - metrics.get('cer', 1)) * 100
                print(f"   üéØ –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {recovery_score:.1f}%")
    
    def demo_json_validation(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON"""
        print("\n\n‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–ê–õ–ò–î–ê–¶–ò–ò JSON")
        print("=" * 50)
        
        # –ü—Ä–∏–º–µ—Ä—ã JSON –¥–∞–Ω–Ω—ã—Ö
        json_examples = [
            {
                "name": "–í–∞–ª–∏–¥–Ω—ã–π JSON",
                "data": {
                    "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                    "date": "01.01.2023",
                    "phone": "+7(999)123-45-67"
                },
                "valid": True
            },
            {
                "name": "JSON —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏",
                "data": {
                    "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
                    # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç date –∏ phone
                },
                "valid": True  # JSON –≤–∞–ª–∏–¥–µ–Ω, –Ω–æ –Ω–µ–ø–æ–ª–æ–Ω
            },
            {
                "name": "JSON —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏",
                "data": {
                    "name": 123,  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
                    "date": "01.01.2023",
                    "phone": "+7(999)123-45-67"
                },
                "valid": True  # JSON –≤–∞–ª–∏–¥–µ–Ω —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏
            }
        ]
        
        for example in json_examples:
            print(f"\nüìÑ {example['name']}:")
            print(f"   –î–∞–Ω–Ω—ã–µ: {json.dumps(example['data'], ensure_ascii=False, indent=2)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON
            is_valid = self._validate_json(example['data'])
            print(f"   ‚úÖ JSON –≤–∞–ª–∏–¥–µ–Ω: {'–î–∞' if is_valid else '–ù–µ—Ç'}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ö–µ–º–µ
            schema_compliance = self._check_schema_compliance(example['data'])
            print(f"   üìã –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ö–µ–º–µ: {'–î–∞' if schema_compliance else '–ù–µ—Ç'}")
    
    def demo_performance_metrics(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n\n‚ö° –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–ï–¢–†–ò–ö –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("=" * 50)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        test_texts = [
            "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç",
            "–°—Ä–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã",
            "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã OCR —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–ª–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"
        ]
        
        for i, text in enumerate(test_texts, 1):
            print(f"\nüìÑ –¢–µ—Å—Ç {i}: {text[:30]}...")
            
            # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            start_time = time.time()
            metrics = self._calculate_metrics(text, text)  # –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            end_time = time.time()
            
            processing_time = end_time - start_time
            
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f} —Å–µ–∫")
            print(f"   üìä –°–∏–º–≤–æ–ª–æ–≤: {len(text)}")
            print(f"   üìä –°–ª–æ–≤: {len(text.split())}")
            print(f"   üéØ CER: {metrics.get('cer', 0):.3f}")
            print(f"   üéØ WER: {metrics.get('wer', 0):.3f}")
    
    def _calculate_metrics(self, extracted_text: str, ground_truth: str) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞"""
        try:
            response = requests.post(
                f"{self.base_url}/metrics/calculate",
                json={
                    "extracted_text": extracted_text,
                    "ground_truth": ground_truth
                }
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–µ—Ç—Ä–∏–∫: {e}")
            return {}
    
    def _display_metrics(self, metrics: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        print(f"   üìä CER: {metrics.get('cer', 0):.3f}")
        print(f"   üìä WER: {metrics.get('wer', 0):.3f}")
        print(f"   üìä Normalized Levenshtein: {metrics.get('normalized_levenshtein', 0):.3f}")
        print(f"   üìä Exact Match: {metrics.get('exact_match', 0)}")
        print(f"   üìä Char F1: {metrics.get('char_f1', 0):.3f}")
        print(f"   üìä Word F1: {metrics.get('word_f1', 0):.3f}")
    
    def _calculate_overall_score(self, metrics: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞"""
        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        weights = {
            'cer': 0.4,
            'wer': 0.3,
            'levenshtein': 0.2,
            'exact_match': 0.1
        }
        
        score = 0
        score += (1 - metrics.get('cer', 1)) * weights['cer'] * 100
        score += (1 - metrics.get('wer', 1)) * weights['wer'] * 100
        score += (1 - metrics.get('normalized_levenshtein', 1)) * weights['levenshtein'] * 100
        score += metrics.get('exact_match', 0) * weights['exact_match'] * 100
        
        return score
    
    def _simulate_field_extraction(self, text: str, expected_fields: list) -> Dict[str, str]:
        """–°–∏–º—É–ª—è—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π"""
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π
        extracted = {}
        
        for field in expected_fields:
            if field == "name" and "–ò–≤–∞–Ω–æ–≤" in text:
                extracted[field] = "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
            elif field == "date" and "01.01" in text:
                extracted[field] = "01.01.1990"
            elif field == "phone" and "+7" in text:
                extracted[field] = "+7(999)123-45-67"
            elif field == "email" and "@" in text:
                extracted[field] = "sidor@example.com"
            elif field == "amount" and "100000" in text:
                extracted[field] = "100000"
            elif field == "passport" and "1234" in text:
                extracted[field] = "1234 567890"
        
        return extracted
    
    def _calculate_field_accuracy(self, extracted: Dict[str, str], expected: list) -> float:
        """–†–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π"""
        if not expected:
            return 0.0
        
        correct_fields = 0
        for field in expected:
            if field in extracted and extracted[field]:
                correct_fields += 1
        
        return (correct_fields / len(expected)) * 100
    
    def _validate_json(self, data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON"""
        try:
            json.dumps(data, ensure_ascii=False)
            return True
        except (TypeError, ValueError):
            return False
    
    def _check_schema_compliance(self, data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ö–µ–º–µ"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["name"]
        
        for field in required_fields:
            if field not in data or not data[field]:
                return False
        
        return True
    
    def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ó–ê–ü–£–°–ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò OCR QUALITY ASSESSMENT API")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        try:
            response = requests.get(f"{self.base_url}/health")
            if response.status_code != 200:
                print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
                return
        except requests.exceptions.ConnectionError:
            print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
            return
        
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π
        self.demo_ocr_quality_assessment()
        self.demo_field_extraction()
        self.demo_noise_handling()
        self.demo_json_validation()
        self.demo_performance_metrics()
        
        print("\n\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 60)
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ OCR!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    demo = OCRDemo()
    demo.run_demo()

if __name__ == "__main__":
    main()
