#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
"""

import requests
import json
from PIL import Image, ImageDraw, ImageFont
import io

def create_detailed_test_image():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —á–µ—Ç–∫–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏"""
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.new('RGB', (1200, 800), color='white')
    draw = ImageDraw.Draw(img)
    
    try:
        font = ImageFont.truetype("arial.ttf", 20)
    except:
        font = ImageFont.load_default()
    
    # –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (—Ä—É—Å—Å–∫–∏–π) - —á–µ—Ç–∫–æ —Å–ª–µ–≤–∞
    russian_text = [
        "–†–ê–ú–û–ß–ù–´–ô –î–û–ì–û–í–û–†",
        "‚Ññ IC-45-2022",
        "–û—Ç 1 –°–µ–Ω—Ç—è–±—Ä—è 2022 –≥.",
        "–ú–æ—Å–∫–≤–∞",
        "",
        "COREX LOGISTICS LIMITED",
        "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ",
        "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤ –ò—Ä–ª–∞–Ω–¥–∏–∏",
        "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä 540725",
        "–ê–¥—Ä–µ—Å: –î—É–±–ª–∏–Ω 8",
        "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –î–∏—Ä–µ–∫—Ç–æ—Ä–æ–º",
        "–ê–Ω–¥—Ä–µ–µ–º –¢–∞—Ä–∞–∫–∞–Ω–æ–≤—ã–º",
        "–∏–º–µ–Ω—É–µ–º–æ–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º",
        "¬´–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨¬ª"
    ]
    
    # –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π) - —á–µ—Ç–∫–æ —Å–ø—Ä–∞–≤–∞
    english_text = [
        "MASTER AGREEMENT",
        "No. IC-45-2022",
        "Dated September 01, 2022",
        "Moscow",
        "",
        "COREX LOGISTICS LIMITED",
        "Legal entity",
        "registered in Ireland",
        "registration number 540725",
        "Address: Dublin 8",
        "Represented by Director",
        "Andrey Tarakanov",
        "hereinafter referred to as",
        "\"CONTRACTOR\""
    ]
    
    # –†–∏—Å—É–µ–º –ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–ª–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞)
    y_pos = 50
    for line in russian_text:
        draw.text((50, y_pos), line, fill='black', font=font)
        y_pos += 30
    
    # –†–∏—Å—É–µ–º –ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–ø—Ä–∞–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞)
    y_pos = 50
    for line in english_text:
        draw.text((650, y_pos), line, fill='black', font=font)
        y_pos += 30
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
    draw.line([(600, 0), (600, 800)], fill='gray', width=2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
    img_byte_arr = io.BytesIO()
    img.save(img_byte_arr, format='PNG')
    return img_byte_arr.getvalue()

def test_detailed_ocr():
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR"""
    print("üîç –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–æ–ª–±—Ü–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_data = create_detailed_test_image()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    with open('test_columns_image.png', 'wb') as f:
        f.write(image_data)
    print("üíæ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ 'test_columns_image.png'")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ API
    files = {'file': ('test_columns.png', image_data, 'image/png')}
    
    try:
        response = requests.post('http://127.0.0.1:8000/ocr/process', files=files)
        
        if response.status_code == 200:
            result = response.json()
            
            print("‚úÖ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
            print(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(result['extracted_text'])} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìä –°—Ç–æ–ª–±—Ü–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {result.get('columns_count', 0)}")
            print(f"üìë –°—Ç—Ä–∞–Ω–∏—Ü: {result.get('total_pages', 1)}")
            print(f"üåê –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {result.get('has_multiple_columns', False)}")
            
            print(f"\nüìù –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:")
            print(result['extracted_text'])
            
            if result.get('columns'):
                print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤:")
                for i, column in enumerate(result['columns']):
                    print(f"  –°—Ç–æ–ª–±–µ—Ü {i+1} ({column['side']}):")
                    print(f"    –Ø–∑—ã–∫: {column['language']}")
                    print(f"    –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {column['items_count']}")
                    print(f"    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {column['confidence_avg']:.2f}")
                    print(f"    –¢–µ–∫—Å—Ç: {column['text']}")
                    print()
            else:
                print("‚ö†Ô∏è  –°—Ç–æ–ª–±—Ü—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(response.text)
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("üî¨ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤")
    print("=" * 50)
    
    test_detailed_ocr()
